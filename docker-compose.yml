version: '3.8'

services:
  # Application React principale
  devsecops-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: devsecops-app
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    volumes:
      - ./tests:/usr/share/nginx/html/tests:ro
    networks:
      - devsecops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # SonarQube pour l'analyse de code
  sonarqube:
    image: sonarqube:10.3-community
    container_name: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_JDBC_URL=jdbc:postgresql://postgres:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - devsecops-network
    depends_on:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Base de données PostgreSQL pour SonarQube
  postgres:
    image: postgres:15-alpine
    container_name: postgres-sonar
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - devsecops-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service de tests de sécurité
  security-scanner:
    build:
      context: .
      dockerfile: docker/Dockerfile.scanner
    container_name: security-scanner
    volumes:
      - .:/workspace:ro
      - ./test-results:/workspace/test-results
    working_dir: /workspace
    networks:
      - devsecops-network
    environment:
      - TRIVY_CACHE_DIR=/tmp/trivy-cache
      - CHECKOV_LOG_LEVEL=INFO
    command: ["tail", "-f", "/dev/null"]  # Keep container running
    restart: unless-stopped

  # Serveur de fichiers pour les rapports
  reports-server:
    image: nginx:alpine
    container_name: reports-server
    ports:
      - "8080:80"
    volumes:
      - ./test-results:/usr/share/nginx/html:ro
      - ./docker/reports-nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - devsecops-network
    restart: unless-stopped
    depends_on:
      - security-scanner

  # Service de monitoring (Prometheus - optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - devsecops-network
    restart: unless-stopped

  # Dashboard Grafana (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - devsecops-network
    restart: unless-stopped
    depends_on:
      - prometheus

volumes:
  sonarqube_data:
    driver: local
  sonarqube_extensions:
    driver: local
  sonarqube_logs:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  devsecops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16